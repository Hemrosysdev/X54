///////////////////////////////////////////////////////////////////////////////
///
/// @file FreeRtosTask.cpp
///
/// This file was developed as part of UX Extended Eco System Testframework (UX-EES-TSFW)
///
/// @brief Implementation file of class FreeRtosTask.
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         http://www.ultratronik.de
///
/// @author written by Gerd Esser, Research & Development, gesser@ultratronik.de
///
/// @date 21.10.2019
///
/// @copyright Copyright 2021 by Ultratronik GmbH.
///
/// This file and/or parts of it are subject to UltratronikÂ´s software license terms (SoLiT, Version 1.16.2).
/// With the use of this software you accept the SoLiT. Without written approval of Ultratronik GmbH this
/// software may not be copied, redistributed or used in any other way than stated in the conditions of the
/// SoLiT.
///
///////////////////////////////////////////////////////////////////////////////

#include "FreeRtosTask.h"

#include <esp_log.h>
#include <freertos/task.h>

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

namespace UxEspCppLibrary
{

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

FreeRtosTask::FreeRtosTask( const uint32_t u32StackSize,
                            const UBaseType_t  uTaskPriority,
                            const std::string & strName )
: EspLog( strName )
, m_u32StackSize( u32StackSize )
, m_uPriority( uTaskPriority )
, m_strName( strName )
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

FreeRtosTask::~FreeRtosTask()
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void FreeRtosTask::create( void )
{
    // do nothing
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void FreeRtosTask::systemUp( void )
{
    // do nothing
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void FreeRtosTask::run( void )
{

}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void FreeRtosTask::createTask( void )
{
    const BaseType_t rc = xTaskCreate( &FreeRtosTask::taskCallback,
                                       m_strName.c_str(),
                                       m_u32StackSize,
                                       this,
                                       m_uPriority,
                                       nullptr );

    if ( rc != pdPASS )
    {
        vlogError( "createTask(): xTaskCreate failed (%d)", rc );
        ESP_ERROR_CHECK( ESP_FAIL );
    }

    create();
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void FreeRtosTask::taskCallback( void * const pArg )                   // NOSONAR that's what the interface requires
{
    FreeRtosTask * const pTask = reinterpret_cast<FreeRtosTask *>( pArg );

    if ( pTask == nullptr )
    {
        ESP_ERROR_CHECK( ESP_FAIL );
    }
    else
    {
        pTask->execute();
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

const std::string & FreeRtosTask::taskName( void ) const
{
    return m_strName;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

const char* FreeRtosTask::taskNameCstr( void ) const
{
    return m_strName.c_str();
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

} // namespace UxEspCppLibrary

