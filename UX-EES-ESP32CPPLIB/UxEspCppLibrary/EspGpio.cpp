/*
 * EspGpio.cpp
 *
 *  Created on: 22.10.2019
 *      Author: gesser
 */

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

#include "EspGpio.h"
#include <hal/gpio_types.h>

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

namespace UxEspCppLibrary
{

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspGpio::EspGpio( const std::string &   strLogName )
: EspLog( strLogName )
, m_nGpioNum( GPIO_NUM_MAX )
, m_nIntrType( GPIO_INTR_DISABLE )
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspGpio::EspGpio( const gpio_num_t      nGpioNum,      /*!< GPIO number */
                  const gpio_mode_t     nMode,         /*!< GPIO mode: set input/output mode                     */
                  const gpio_pullup_t   nPullUpEn,     /*!< GPIO pull-up                                         */
                  const gpio_pulldown_t nPullDownEn,   /*!< GPIO pull-down                                       */
                  const gpio_int_type_t nIntrType,
                  const std::string &   strLogName )   /*!< GPIO interrupt type                                  */
: EspLog( strLogName )
{
    create( nGpioNum, nMode, nPullUpEn, nPullDownEn, nIntrType );
}

/*!************************************************************************************************************************************************************
}
 *
 *************************************************************************************************************************************************************/

EspGpio::~EspGpio()
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

esp_err_t EspGpio::create( const gpio_num_t      nGpioNum,      /*!< GPIO number */
                           const gpio_mode_t     nMode,         /*!< GPIO mode: set input/output mode                     */
                           const gpio_pullup_t   nPullUpEn,     /*!< GPIO pull-up                                         */
                           const gpio_pulldown_t nPullDownEn,   /*!< GPIO pull-down                                       */
                           const gpio_int_type_t nIntrType )    /*!< GPIO interrupt type                                  */
{
    m_nGpioNum  = nGpioNum;
    m_nIntrType = nIntrType;

    gpio_config_t io_conf;

    //disable interrupt
    io_conf.intr_type = nIntrType;
    //set as output mode
    io_conf.mode = nMode;
    //bit mask of the pins that you want to set,e.g.GPIO18/19
    io_conf.pin_bit_mask = ( 1ULL<<nGpioNum );
    //enable pull-down mode
    io_conf.pull_down_en = nPullDownEn;
    //disable pull-up mode
    io_conf.pull_up_en = nPullUpEn;

    //configure GPIO with the given settings
    return gpio_config( &io_conf );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

esp_err_t EspGpio::setHigh( void )
{
    return gpio_set_level( m_nGpioNum, 1 );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

esp_err_t EspGpio::setLow( void )
{
    return gpio_set_level( m_nGpioNum, 0 );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

esp_err_t EspGpio::set( const uint32_t u32Value )
{
    return gpio_set_level( m_nGpioNum, u32Value );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

gpio_num_t EspGpio::gpioNum( void ) const
{
    return m_nGpioNum;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

bool EspGpio::isHigh( void )
{
    return ( gpio_get_level( m_nGpioNum ) > 0 );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

bool EspGpio::isLow( void )
{
    return ( gpio_get_level( m_nGpioNum ) == 0 );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

int EspGpio::level( void )
{
    return gpio_get_level( m_nGpioNum );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/


esp_err_t EspGpio::disableInterrupt( void )
{
    //change gpio interrupt type for one pin
    return gpio_set_intr_type( m_nGpioNum, GPIO_INTR_DISABLE );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

esp_err_t EspGpio::enableInterrupt( void )
{
    //change gpio interrupt type for one pin
    return gpio_set_intr_type( m_nGpioNum, m_nIntrType );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

// static
esp_err_t EspGpio::setDriveCapability( const gpio_num_t nGpioNum,
                                       const EspGpio::DriveCapability nDriveCapability )
{
    return gpio_set_drive_capability( nGpioNum,
                                      static_cast<gpio_drive_cap_t>( nDriveCapability ) );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

// static
EspGpio::DriveCapability EspGpio::driveCapability( const gpio_num_t nGpioNum )
{
    gpio_drive_cap_t nDriveCapability;

    gpio_get_drive_capability( nGpioNum, &nDriveCapability );

    return static_cast<EspGpio::DriveCapability>( nDriveCapability );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

esp_err_t EspGpio::setDriveCapability( const EspGpio::DriveCapability nDriveCapability )
{
    return setDriveCapability( m_nGpioNum, nDriveCapability );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspGpio::DriveCapability EspGpio::driveCapability() const
{
    return driveCapability( m_nGpioNum );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

} // namespace UxEspCppLibrary
