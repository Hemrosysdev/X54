/*
 * EspLedc.cpp
 *
 *  Created on: 05.11.2019
 *      Author: gesser
 */

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

#include "EspLedcChannel.h"
#include "EspLedcTimer.h"

#include <esp_idf_version.h>

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

namespace UxEspCppLibrary
{

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspLedcChannel::EspLedcChannel()
: EspLog( "EspLedcChannel" )
, m_nLedcChannel( LEDC_CHANNEL_MAX )
, m_nGpioNum( GPIO_NUM_MAX )
, m_pLedcTimer( NULL )
, m_u32Duty( 0 )
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspLedcChannel::EspLedcChannel( const std::string & strLogName )
: EspLog( strLogName )
, m_nLedcChannel( LEDC_CHANNEL_MAX )
, m_nGpioNum( GPIO_NUM_MAX )
, m_pLedcTimer( NULL )
, m_u32Duty( 0 )
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspLedcChannel::~EspLedcChannel()
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

esp_err_t EspLedcChannel::init( const ledc_channel_t nLedcChannel,
                                const gpio_num_t nGpioNum,
                                EspLedcTimer* pLedcTimer )
{
    esp_err_t  nEspError = ESP_FAIL;

    m_pLedcTimer = pLedcTimer;
    m_nGpioNum = nGpioNum;
    m_nLedcChannel = nLedcChannel;

    if ( m_pLedcTimer )
    {
        ledc_channel_config_t ledcChannelConfig =
        {
                //GPIO number
                .gpio_num = m_nGpioNum,
                //set LEDC mode, from ledc_mode_t
                .speed_mode = m_pLedcTimer->speedMode(),
                //set LEDC channel 0
                .channel = m_nLedcChannel,
                //GPIO INTR TYPE, as an example, we enable fade_end interrupt here.
                .intr_type = LEDC_INTR_DISABLE,
                //set LEDC timer source, if different channel use one timer,
                //the frequency and bit_num of these channels should be the same
                .timer_sel = m_pLedcTimer->timerNum(),
                //set the duty for initialization.(duty range is 0 ~ ((2**bit_num)-1)
                .duty = 0, // 0% by default
                // LEDC channel hpoint value, the max value is 0xfffff
                //.hpoint = 0xffff
                .hpoint = 0
#if ESP_IDF_VERSION >= ESP_IDF_VERSION_VAL(4, 4, 0)
                , .flags { .output_invert = 0 }
#endif
        };

        //set the configuration
        nEspError = ledc_channel_config( &ledcChannelConfig );
    }

    return nEspError;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

ledc_channel_t EspLedcChannel::channel( void ) const
{
    return m_nLedcChannel;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

esp_err_t EspLedcChannel::setDuty( const uint32_t u32Duty )
{
    esp_err_t nEspError = ESP_FAIL;

    m_u32Duty = u32Duty;

    nEspError = ledc_set_duty( m_pLedcTimer->speedMode(),
                               m_nLedcChannel,
                               u32Duty );

    if ( nEspError == ESP_OK )
    {
        nEspError= ledc_update_duty( m_pLedcTimer->speedMode(), m_nLedcChannel );
    }

    return nEspError;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

gpio_num_t EspLedcChannel::gpioNum( void ) const
{
    return m_nGpioNum;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspLedcTimer* EspLedcChannel::ledcTimer( void ) const
{
    return m_pLedcTimer;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

uint32_t EspLedcChannel::duty( void ) const
{
    return m_u32Duty;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

} // namespace UxEspCppLibrary

