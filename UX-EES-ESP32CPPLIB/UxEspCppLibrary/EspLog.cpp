///////////////////////////////////////////////////////////////////////////////
///
/// @file EspLog.cpp
///
/// This file was developed as part of UX Extended Eco System Testframework (UX-EES-TSFW)
///
/// @brief Implementation file of class EspLog.
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         http://www.ultratronik.de
///
/// @author written by Gerd Esser, Research & Development, gesser@ultratronik.de
///
/// @date 24.10.2019
///
/// @copyright Copyright 2021 by Ultratronik GmbH.
///
/// This file and/or parts of it are subject to UltratronikÂ´s software license terms (SoLiT, Version 1.16.2).
/// With the use of this software you accept the SoLiT. Without written approval of Ultratronik GmbH this
/// software may not be copied, redistributed or used in any other way than stated in the conditions of the
/// SoLiT.
///
///////////////////////////////////////////////////////////////////////////////

#include "EspLog.h"

#include <esp_log.h>

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

namespace UxEspCppLibrary
{

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspLog::EspLog()
: m_strLogTag( "" )
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspLog::EspLog( const std::string& strLogTag )
: m_strLogTag( strLogTag )
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspLog::EspLog( const EspLog& theRight )
{
    if ( this != &theRight )
    {
        m_strLogTag = theRight.m_strLogTag;
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspLog::~EspLog()
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void EspLog::setLogTag( const std::string& strLogTag )
{
    m_strLogTag = strLogTag;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

const std::string& EspLog::logTag( void ) const
{
    return m_strLogTag;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void EspLog::vlogError( const char* pszFormat, ... ) const        // NOSONAR
{
    va_list argp;
    va_start( argp, pszFormat );

    static char szMsg[1000];
    szMsg[0] = '\0';

    vsprintf( szMsg, pszFormat, argp );

    va_end( argp );

    logError( szMsg );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void EspLog::logError( const char* const pszLog ) const
{
    ESP_LOGE( m_strLogTag.c_str(), "%s", pszLog );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void EspLog::vlogWarning( const char* pszFormat, ... ) const                          // NOSONAR
{
    va_list argp;
    va_start( argp, pszFormat );

    static char szMsg[1000];
    szMsg[0] = '\0';

    vsprintf( szMsg, pszFormat, argp );

    va_end( argp );

    logWarning( szMsg );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void EspLog::logWarning( const char* const pszLog ) const
{
    ESP_LOGW( m_strLogTag.c_str(), "%s", pszLog );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void EspLog::vlogInfo( const char* pszFormat, ... ) const                  // NOSONAR
{
    va_list argp;
    va_start( argp, pszFormat );

    static char szMsg[1000];
    szMsg[0] = '\0';

    vsprintf( szMsg, pszFormat, argp );

    va_end( argp );

    logInfo( szMsg );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void EspLog::logInfo( const char* const pszLog ) const
{
    ESP_LOGI( m_strLogTag.c_str(), "%s", pszLog );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

} // namespace UxEspCppLibrary

