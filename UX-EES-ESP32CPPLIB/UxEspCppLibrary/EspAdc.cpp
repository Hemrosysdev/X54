/*
 * EspAdc.cpp
 *
 *  Created on: 06.11.2019
 *      Author: gesser
 */

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

#include "EspAdc.h"

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

namespace UxEspCppLibrary
{

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspAdc::EspAdc()
: EspLog( "EspAdc" )
, m_nUnit( ADC_UNIT_MAX )
, m_nChannel( ADC_CHANNEL_MAX )
, m_nAtten( ADC_ATTEN_MAX )
, m_nBitsWidth( ADC_WIDTH_MAX )
, m_u32Vref( 0 )
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspAdc::EspAdc( const std::string& strLogName )
: EspLog( "EspAdc" )
, m_nUnit( ADC_UNIT_MAX )
, m_nChannel( ADC_CHANNEL_MAX )
, m_nAtten( ADC_ATTEN_MAX )
, m_nBitsWidth( ADC_WIDTH_MAX )
, m_u32Vref( 0 )
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

EspAdc::~EspAdc()
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

esp_err_t EspAdc::init( const adc_unit_t         nUnit,
                        const adc_channel_t      nChannel,
                        const adc_atten_t        nAtten,
                        const adc_bits_width_t   nBitsWidth,
                        const uint32_t           u32Vref /* = 0 */ )
{
    esp_err_t nEspError = ESP_OK;

    m_nUnit      = nUnit;
    m_nChannel   = nChannel;
    m_nAtten     = nAtten;
    m_nBitsWidth = nBitsWidth;
    m_u32Vref    = u32Vref;

    if ( m_nUnit == ADC_UNIT_1 )
    {
        nEspError = adc1_config_width( m_nBitsWidth );
        adc1_config_channel_atten( static_cast<adc1_channel_t>( m_nChannel ), m_nAtten );
    }
    else
    {
        adc2_config_channel_atten( static_cast<adc2_channel_t>( m_nChannel ), m_nAtten );
    }

    esp_adc_cal_value_t val_type = esp_adc_cal_characterize( m_nUnit,
                                                             m_nAtten,
                                                             m_nBitsWidth,
                                                             m_u32Vref,
                                                             &m_adcCalCharacteristics );
    (void) val_type;

    return nEspError;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

uint32_t EspAdc::readRaw( void )
{
    int nReading = 0;

    if ( m_nUnit == ADC_UNIT_1 )
    {
        nReading += adc1_get_raw( static_cast<adc1_channel_t>( m_nChannel ) );
    }
    else
    {
        adc2_get_raw( static_cast<adc2_channel_t>( m_nChannel ),
                      ADC_WIDTH_BIT_12,
                      &nReading );
    }

    return static_cast<uint32_t>( nReading );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

uint32_t EspAdc::readVoltage( void )
{
    uint32_t u32Raw = readRaw();

    u32Raw = esp_adc_cal_raw_to_voltage( u32Raw, &m_adcCalCharacteristics );

    return u32Raw;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

} // namespace UxEspCppLibrary
