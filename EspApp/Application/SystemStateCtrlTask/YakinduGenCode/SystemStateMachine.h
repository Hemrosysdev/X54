/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef SYSTEMSTATEMACHINE_H_
#define SYSTEMSTATEMACHINE_H_

/*!
 * Forward declaration for the SystemStateMachine state machine.
 */
class SystemStateMachine;


#include <deque>
#include "../YakinduLibrary/sc_types.h"
#include "../YakinduLibrary/sc_statemachine.h"
#include "../YakinduLibrary/sc_timer.h"
#include "../YakinduLibrary/sc_tracing.h"

/*! \file Header of the state machine 'SystemStateMachine'.
 */


#ifndef SCT_EVENTS_SYSTEMSTATEMACHINE_H
#define SCT_EVENTS_SYSTEMSTATEMACHINE_H
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif

namespace systemstatemachine_events
{
typedef enum
{
    invalid_event = SC_INVALID_EVENT_VALUE,
    Application_initCompleted,
    Application_mainStateChanged,
    Application_restartStandbyTimer,
    Application_forceRunCycle,
    GpioDrv_anyUserAction,
    GpioDrv_startButtonPressed,
    GpioDrv_startButtonReleased,
    GpioDrv_jogDialLeft,
    GpioDrv_jogDialRight,
    GpioDrv_jogDialPressed,
    GpioDrv_jogDialReleased,
    GpioDrv_portaFilterRemoved,
    GpioDrv_portaFilterInserted,
    GpioDrv_powerAvailable,
    GpioDrv_powerNotAvailable,
    GpioDrv_terminateStandbyAction,
    ErrorCtrl_anyErrorChange,
    ErrorCtrl_fatalErrorChange,
    ErrorCtrl_significantErrorChange,
    Grinder_evtStopGrind,
    Grinder_evtStartGrind,
    Grinder_startRecipeEdit,
    Grinder_recipeEditAborted,
    Grinder_recipeEditFinished,
    Internal_startButtonShortPress,
    Internal_startButtonLongPress,
    Internal_portaFilterSaveInserted,
    Internal_jogDialVeryLongPress,
    Internal_jogDialLongPress,
    Internal_jogDialShortPress,
    Internal_bothButtonsPressed,
    Internal_bothButtonsReleased,
    Internal_bothButtonsLongPress,
    Internal_bothButtonsLongReleased,
    Internal_manualForceStandby,
    Internal_finishGrinding,
    Internal_standbyStarted,
    Internal_standbyTerminated,
    Internal_timeoutEditMode,
    SystemStateMachine_HemroE54SystemStateMachine_DisplayTest_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_WiFi_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_Errors_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner1_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner2_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner3_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro1_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro2_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro3_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro4_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLabel_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLifeTime_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOn_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOff_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash1_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash2_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash3_time_event_0,
    SystemStateMachine_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash4_time_event_0,
    SystemStateMachine_SleepMode_NormalOperation_time_event_0,
    SystemStateMachine_SleepMode_NormalOperation_time_event_1,
    SystemStateMachine_KeyPressEvaluation_BothButtonsPressed_time_event_0,
    SystemStateMachine_KeyPressEvaluation_LongPress_r2_LongPressStartButton_time_event_0,
    SystemStateMachine_KeyPressEvaluation_LongPress_r2_StartButtonPressed_time_event_0,
    SystemStateMachine_KeyPressEvaluation_LongPress_r2_StartButtonPressedFromBoth_time_event_0,
    SystemStateMachine_KeyPressEvaluation_LongPress_r2_StartButtonLongPressedFromBoth_time_event_0,
    SystemStateMachine_KeyPressEvaluation_LongPress_r1_LongPressJogDial_time_event_0,
    SystemStateMachine_KeyPressEvaluation_LongPress_r1_JogDialPressed_time_event_0,
    SystemStateMachine_KeyPressEvaluation_LongPress_r1_JogDialPressedFromBoth_time_event_0,
    SystemStateMachine_KeyPressEvaluation_LongPress_r1_JogDialLongPressedFromBoth_time_event_0,
    SystemStateMachine_KeyPressEvaluation_LongPress_r1_VeryLongPressJogDial_time_event_0,
    SystemStateMachine_Grinding_Grinding_time_event_0,
    SystemStateMachine_Grinding_GrindingError_time_event_0,
    SystemStateMachine_Grinding_SaveGrindingResults_time_event_0
} SystemStateMachineEventName;

class SctEvent
{
public:

    SctEvent( SystemStateMachineEventName name ) : name( name )
    {
    }

    virtual ~SctEvent()
    {
    }

    const SystemStateMachineEventName name;

};

template <typename T>
class TypedSctEvent : public SctEvent
{
public:

    TypedSctEvent( SystemStateMachineEventName name,
                   T                           value ) :
        SctEvent( name ),
        value( value )
    {
    }

    virtual ~TypedSctEvent()
    {
    }

    const T value;
};

class SctEvent_Application_initCompleted : public SctEvent
{
public:

    SctEvent_Application_initCompleted( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Application_mainStateChanged : public SctEvent
{
public:

    SctEvent_Application_mainStateChanged( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Application_restartStandbyTimer : public SctEvent
{
public:

    SctEvent_Application_restartStandbyTimer( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Application_forceRunCycle : public SctEvent
{
public:

    SctEvent_Application_forceRunCycle( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_anyUserAction : public SctEvent
{
public:

    SctEvent_GpioDrv_anyUserAction( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_startButtonPressed : public SctEvent
{
public:

    SctEvent_GpioDrv_startButtonPressed( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_startButtonReleased : public SctEvent
{
public:

    SctEvent_GpioDrv_startButtonReleased( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_jogDialLeft : public SctEvent
{
public:

    SctEvent_GpioDrv_jogDialLeft( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_jogDialRight : public SctEvent
{
public:

    SctEvent_GpioDrv_jogDialRight( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_jogDialPressed : public SctEvent
{
public:

    SctEvent_GpioDrv_jogDialPressed( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_jogDialReleased : public SctEvent
{
public:

    SctEvent_GpioDrv_jogDialReleased( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_portaFilterRemoved : public SctEvent
{
public:

    SctEvent_GpioDrv_portaFilterRemoved( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_portaFilterInserted : public SctEvent
{
public:

    SctEvent_GpioDrv_portaFilterInserted( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_powerAvailable : public SctEvent
{
public:

    SctEvent_GpioDrv_powerAvailable( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_powerNotAvailable : public SctEvent
{
public:

    SctEvent_GpioDrv_powerNotAvailable( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_GpioDrv_terminateStandbyAction : public SctEvent
{
public:

    SctEvent_GpioDrv_terminateStandbyAction( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_ErrorCtrl_anyErrorChange : public SctEvent
{
public:

    SctEvent_ErrorCtrl_anyErrorChange( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_ErrorCtrl_fatalErrorChange : public SctEvent
{
public:

    SctEvent_ErrorCtrl_fatalErrorChange( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_ErrorCtrl_significantErrorChange : public SctEvent
{
public:

    SctEvent_ErrorCtrl_significantErrorChange( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Grinder_evtStopGrind : public SctEvent
{
public:

    SctEvent_Grinder_evtStopGrind( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Grinder_evtStartGrind : public SctEvent
{
public:

    SctEvent_Grinder_evtStartGrind( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Grinder_startRecipeEdit : public SctEvent
{
public:

    SctEvent_Grinder_startRecipeEdit( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Grinder_recipeEditAborted : public SctEvent
{
public:

    SctEvent_Grinder_recipeEditAborted( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Grinder_recipeEditFinished : public SctEvent
{
public:

    SctEvent_Grinder_recipeEditFinished( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_startButtonShortPress : public SctEvent
{
public:

    SctEvent_Internal_startButtonShortPress( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_startButtonLongPress : public SctEvent
{
public:

    SctEvent_Internal_startButtonLongPress( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_portaFilterSaveInserted : public SctEvent
{
public:

    SctEvent_Internal_portaFilterSaveInserted( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_jogDialVeryLongPress : public SctEvent
{
public:

    SctEvent_Internal_jogDialVeryLongPress( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_jogDialLongPress : public SctEvent
{
public:

    SctEvent_Internal_jogDialLongPress( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_jogDialShortPress : public SctEvent
{
public:

    SctEvent_Internal_jogDialShortPress( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_bothButtonsPressed : public SctEvent
{
public:

    SctEvent_Internal_bothButtonsPressed( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_bothButtonsReleased : public SctEvent
{
public:

    SctEvent_Internal_bothButtonsReleased( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_bothButtonsLongPress : public SctEvent
{
public:

    SctEvent_Internal_bothButtonsLongPress( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_bothButtonsLongReleased : public SctEvent
{
public:

    SctEvent_Internal_bothButtonsLongReleased( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_manualForceStandby : public SctEvent
{
public:

    SctEvent_Internal_manualForceStandby( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_finishGrinding : public SctEvent
{
public:

    SctEvent_Internal_finishGrinding( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_standbyStarted : public SctEvent
{
public:

    SctEvent_Internal_standbyStarted( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_standbyTerminated : public SctEvent
{
public:

    SctEvent_Internal_standbyTerminated( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class SctEvent_Internal_timeoutEditMode : public SctEvent
{
public:

    SctEvent_Internal_timeoutEditMode( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};
class TimedSctEvent : public SctEvent
{
public:

    TimedSctEvent( SystemStateMachineEventName name ) : SctEvent( name )
    {
    };
};

}
#endif /* SCT_EVENTS_SYSTEMSTATEMACHINE_H */


/*! Define indices of states in the StateConfVector */
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_INIT 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_MANUALMODE 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_RECIPE4 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_RECIPE3 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_RECIPE2 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_RECIPE1 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISPLAYTEST 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_WIFI 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_ERRORS 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOWBANNER1 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOWBANNER2 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOWBANNER3 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOW5MIN 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOW3MIN 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOWINTRO1 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOWINTRO2 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOWINTRO3 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOWINTRO4 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOW10MIN 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOW20MIN 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_AUTOSLEEPEDIT_R1_SHOW30MIN 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_WLANSETTINGS 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_WLANSETTINGS_R1_WLANON 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_WLANSETTINGS_R1_WLANOFF 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_WLANSETTINGS_R1_WLANRESET 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_WLANSETTINGS_R1_ANNOUNCEEDIT 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_EDITRECIPE1 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_EDITRECIPE2 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_EDITRECIPE3 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_EDITRECIPE4 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_GRINDMANUAL 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_GRINDRECIPE4 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_GRINDRECIPE3 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_GRINDRECIPE2 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_GRINDRECIPE1 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_STANDBY 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISCLIFETIME 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISCLIFETIME_R1_SHOWDISCLABEL 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISCLIFETIME_R1_SHOWDISCLIFETIME 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISCLIFETIME_R1_SHOWRESETON 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISCLIFETIME_R1_SHOWRESETOFF 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISCLIFETIME_R1_SHOWINTRO 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISCLIFETIME_R1_SHOWINTRO_R1_SHOWDASH1 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISCLIFETIME_R1_SHOWINTRO_R1_SHOWDASH2 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISCLIFETIME_R1_SHOWINTRO_R1_SHOWDASH3 0
#define SCVI_HEMROE54SYSTEMSTATEMACHINE_DISCLIFETIME_R1_SHOWINTRO_R1_SHOWDASH4 0
#define SCVI_SLEEPMODE_NORMALOPERATION 1
#define SCVI_SLEEPMODE_STANDBY 1
#define SCVI_KEYPRESSEVALUATION_BOTHBUTTONSPRESSED 2
#define SCVI_KEYPRESSEVALUATION_LONGPRESSBOTHBUTTONS 2
#define SCVI_KEYPRESSEVALUATION_LONGPRESS 2
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R2_STARTBUTTONERROR 2
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R2_LONGPRESSSTARTBUTTON 2
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R2_STARTBUTTONPRESSED 2
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R2_STARTBUTTONRELEASED 2
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R2_STARTBUTTONPRESSEDFROMBOTH 2
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R2_STARTBUTTONLONGPRESSEDFROMBOTH 2
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R1_JOGDIALERROR 3
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R1_LONGPRESSJOGDIAL 3
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R1_JOGDIALPRESSED 3
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R1_JOGDIALRELEASED 3
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R1_JOGDIALPRESSEDFROMBOTH 3
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R1_JOGDIALLONGPRESSEDFROMBOTH 3
#define SCVI_KEYPRESSEVALUATION_LONGPRESS_R1_VERYLONGPRESSJOGDIAL 3
#define SCVI_GRINDING_GRINDING 4
#define SCVI_GRINDING_GRINDINGERROR 4
#define SCVI_GRINDING_IDLE 4
#define SCVI_GRINDING_SAVEGRINDINGRESULTS 4
#define SCVI_PORTAFILTERINSERTION_IDLE 5
#define SCVI_RECIPEEDIT_ORTHOGONALRECIPEEDIT 6
#define SCVI_RECIPEEDIT_ORTHOGONALRECIPEEDIT_R1_EDITDIGIT1 6
#define SCVI_RECIPEEDIT_ORTHOGONALRECIPEEDIT_R1_EDITDIGIT2 6
#define SCVI_RECIPEEDIT_ORTHOGONALRECIPEEDIT_R1_EDITDIGIT3 6
#define SCVI_RECIPEEDIT_ORTHOGONALRECIPEEDIT_R1_EDITRECIPE 6
#define SCVI_RECIPEEDIT_ORTHOGONALRECIPEEDIT_R2_EDITRECIPE 7
#define SCVI_RECIPEEDIT_IDLE 6


class SystemStateMachine : public sc::timer::TimedInterface, public sc::StatemachineInterface
{
public:

    SystemStateMachine();

    virtual ~SystemStateMachine();

    /*! Enumeration of all states */
    typedef enum
    {
        SystemStateMachine_last_state,
        HemroE54SystemStateMachine_Init,
        HemroE54SystemStateMachine_ManualMode,
        HemroE54SystemStateMachine_Recipe4,
        HemroE54SystemStateMachine_Recipe3,
        HemroE54SystemStateMachine_Recipe2,
        HemroE54SystemStateMachine_Recipe1,
        HemroE54SystemStateMachine_DisplayTest,
        HemroE54SystemStateMachine_WiFi,
        HemroE54SystemStateMachine_Errors,
        HemroE54SystemStateMachine_AutoSleepEdit,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner1,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner2,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner3,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_Show5Min,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_Show3Min,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro1,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro2,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro3,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro4,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_Show10Min,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_Show20Min,
        HemroE54SystemStateMachine_AutoSleepEdit_r1_Show30Min,
        HemroE54SystemStateMachine_WlanSettings,
        HemroE54SystemStateMachine_WlanSettings_r1_WlanOn,
        HemroE54SystemStateMachine_WlanSettings_r1_WlanOff,
        HemroE54SystemStateMachine_WlanSettings_r1_WlanReset,
        HemroE54SystemStateMachine_WlanSettings_r1_AnnounceEdit,
        HemroE54SystemStateMachine_EditRecipe1,
        HemroE54SystemStateMachine_EditRecipe2,
        HemroE54SystemStateMachine_EditRecipe3,
        HemroE54SystemStateMachine_EditRecipe4,
        HemroE54SystemStateMachine_GrindManual,
        HemroE54SystemStateMachine_GrindRecipe4,
        HemroE54SystemStateMachine_GrindRecipe3,
        HemroE54SystemStateMachine_GrindRecipe2,
        HemroE54SystemStateMachine_GrindRecipe1,
        HemroE54SystemStateMachine_Standby,
        HemroE54SystemStateMachine_DiscLifeTime,
        HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLabel,
        HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLifeTime,
        HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOn,
        HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOff,
        HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro,
        HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash1,
        HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash2,
        HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash3,
        HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash4,
        SleepMode_NormalOperation,
        SleepMode_Standby,
        KeyPressEvaluation_BothButtonsPressed,
        KeyPressEvaluation_LongPressBothButtons,
        KeyPressEvaluation_LongPress,
        KeyPressEvaluation_LongPress_r2_StartButtonError,
        KeyPressEvaluation_LongPress_r2_LongPressStartButton,
        KeyPressEvaluation_LongPress_r2_StartButtonPressed,
        KeyPressEvaluation_LongPress_r2_StartButtonReleased,
        KeyPressEvaluation_LongPress_r2_StartButtonPressedFromBoth,
        KeyPressEvaluation_LongPress_r2_StartButtonLongPressedFromBoth,
        KeyPressEvaluation_LongPress_r1_JogDialError,
        KeyPressEvaluation_LongPress_r1_LongPressJogDial,
        KeyPressEvaluation_LongPress_r1_JogDialPressed,
        KeyPressEvaluation_LongPress_r1_JogDialReleased,
        KeyPressEvaluation_LongPress_r1_JogDialPressedFromBoth,
        KeyPressEvaluation_LongPress_r1_JogDialLongPressedFromBoth,
        KeyPressEvaluation_LongPress_r1_VeryLongPressJogDial,
        Grinding_Grinding,
        Grinding_GrindingError,
        Grinding_Idle,
        Grinding_SaveGrindingResults,
        PortaFilterInsertion_Idle,
        RecipeEdit_OrthogonalRecipeEdit,
        RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit1,
        RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit2,
        RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit3,
        RecipeEdit_OrthogonalRecipeEdit_r1_EditRecipe,
        RecipeEdit_OrthogonalRecipeEdit_r2_EditRecipe,
        RecipeEdit_Idle
    } SystemStateMachineStates;

    static const sc_integer numStates = 77;

    //! Inner class for Display interface scope.
    class Display
    {
public:

        Display( SystemStateMachine * parent );


        //! Inner class for Display interface scope operation callbacks.
        class OperationCallback
        {
public:

            virtual ~OperationCallback() = 0;

            virtual void sendTextStr( sc_string strContent ) = 0;

            virtual void sendDots( sc_string strDots ) = 0;

            virtual void updateAllStatusLed() = 0;

            virtual void sendBlock( sc_string strTest,
                                    sc_string strDots,
                                    sc_string strStates ) = 0;


        };

        /*! Set the working instance of the operation callback interface 'OperationCallback'. */
        void setOperationCallback( OperationCallback * operationCallback );

private:

        friend class SystemStateMachine;

        void dispatch_event( systemstatemachine_events::SctEvent * event );

        SystemStateMachine * parent;


        OperationCallback * ifaceDisplayOperationCallback;


    };

    /*! Returns an instance of the interface class 'Display'. */
    Display * display();

    //! Inner class for Application interface scope.
    class Application
    {
public:

        Application( SystemStateMachine * parent );

        /*! Gets the value of the variable 'mainStateInit' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateInit() const;


        /*! Gets the value of the variable 'mainStateDisplayTest' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateDisplayTest() const;


        /*! Gets the value of the variable 'mainStateManual' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateManual() const;


        /*! Gets the value of the variable 'mainStateTemp' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateTemp() const;


        /*! Gets the value of the variable 'mainStateDiskDistance' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateDiskDistance() const;


        /*! Gets the value of the variable 'mainStateErrors' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateErrors() const;


        /*! Gets the value of the variable 'mainStateWifi' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateWifi() const;


        /*! Gets the value of the variable 'mainStateSec' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateSec() const;


        /*! Gets the value of the variable 'mainStateOzen' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateOzen() const;


        /*! Gets the value of the variable 'mainStateGram' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateGram() const;


        /*! Gets the value of the variable 'mainStateRecipe4' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateRecipe4() const;


        /*! Gets the value of the variable 'mainStateRecipe3' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateRecipe3() const;


        /*! Gets the value of the variable 'mainStateRecipe2' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateRecipe2() const;


        /*! Gets the value of the variable 'mainStateRecipe1' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateRecipe1() const;


        /*! Gets the value of the variable 'mainStateStandby' that is defined in the interface scope 'Application'. */
        sc_integer getMainStateStandby() const;


        /*! Gets the value of the variable 'mainState' that is defined in the interface scope 'Application'. */
        sc_integer getMainState() const;

        /*! Sets the value of the variable 'mainState' that is defined in the interface scope 'Application'. */
        void setMainState( sc_integer value );


        /*! Raises the in event 'initCompleted' that is defined in the interface scope 'Application'. */
        void raiseInitCompleted();


        /*! Raises the in event 'mainStateChanged' that is defined in the interface scope 'Application'. */
        void raiseMainStateChanged();


        /*! Raises the in event 'restartStandbyTimer' that is defined in the interface scope 'Application'. */
        void raiseRestartStandbyTimer();


        /*! Raises the in event 'forceRunCycle' that is defined in the interface scope 'Application'. */
        void raiseForceRunCycle();


        //! Inner class for Application interface scope operation callbacks.
        class OperationCallback
        {
public:

            virtual ~OperationCallback() = 0;

            virtual void setMainState( sc_integer mainState ) = 0;

            virtual void pushMainState( sc_integer mainState ) = 0;

            virtual void popMainState() = 0;

            virtual void activateRecipe( sc_integer recipeNo ) = 0;

            virtual void startAutoSleepEdit() = 0;

            virtual void stopAutoSleepEdit() = 0;


        };

        /*! Set the working instance of the operation callback interface 'OperationCallback'. */
        void setOperationCallback( OperationCallback * operationCallback );

private:

        friend class SystemStateMachine;

        static const sc_integer mainStateInit;
        static const sc_integer mainStateDisplayTest;
        static const sc_integer mainStateManual;
        static const sc_integer mainStateTemp;
        static const sc_integer mainStateDiskDistance;
        static const sc_integer mainStateErrors;
        static const sc_integer mainStateWifi;
        static const sc_integer mainStateSec;
        static const sc_integer mainStateOzen;
        static const sc_integer mainStateGram;
        static const sc_integer mainStateRecipe4;
        static const sc_integer mainStateRecipe3;
        static const sc_integer mainStateRecipe2;
        static const sc_integer mainStateRecipe1;
        static const sc_integer mainStateStandby;
        sc_integer              mainState;
        /*! Raises the in event 'initCompleted' that is defined in the interface scope 'Application'. */
        void internal_raiseInitCompleted();

        sc_boolean initCompleted_raised;
        /*! Raises the in event 'mainStateChanged' that is defined in the interface scope 'Application'. */
        void internal_raiseMainStateChanged();

        sc_boolean mainStateChanged_raised;
        /*! Raises the in event 'restartStandbyTimer' that is defined in the interface scope 'Application'. */
        void internal_raiseRestartStandbyTimer();

        sc_boolean restartStandbyTimer_raised;
        /*! Raises the in event 'forceRunCycle' that is defined in the interface scope 'Application'. */
        void internal_raiseForceRunCycle();

        sc_boolean forceRunCycle_raised;
        void dispatch_event( systemstatemachine_events::SctEvent * event );

        SystemStateMachine * parent;


        OperationCallback * ifaceApplicationOperationCallback;


    };

    /*! Returns an instance of the interface class 'Application'. */
    Application * application();

    //! Inner class for GpioDrv interface scope.
    class GpioDrv
    {
public:

        GpioDrv( SystemStateMachine * parent );

        /*! Gets the value of the variable 'motorOn' that is defined in the interface scope 'GpioDrv'. */
        sc_boolean getMotorOn() const;

        /*! Sets the value of the variable 'motorOn' that is defined in the interface scope 'GpioDrv'. */
        void setMotorOn( sc_boolean value );


        /*! Raises the in event 'anyUserAction' that is defined in the interface scope 'GpioDrv'. */
        void raiseAnyUserAction();


        /*! Raises the in event 'startButtonPressed' that is defined in the interface scope 'GpioDrv'. */
        void raiseStartButtonPressed();


        /*! Raises the in event 'startButtonReleased' that is defined in the interface scope 'GpioDrv'. */
        void raiseStartButtonReleased();


        /*! Raises the in event 'jogDialLeft' that is defined in the interface scope 'GpioDrv'. */
        void raiseJogDialLeft();


        /*! Raises the in event 'jogDialRight' that is defined in the interface scope 'GpioDrv'. */
        void raiseJogDialRight();


        /*! Raises the in event 'jogDialPressed' that is defined in the interface scope 'GpioDrv'. */
        void raiseJogDialPressed();


        /*! Raises the in event 'jogDialReleased' that is defined in the interface scope 'GpioDrv'. */
        void raiseJogDialReleased();


        /*! Raises the in event 'portaFilterRemoved' that is defined in the interface scope 'GpioDrv'. */
        void raisePortaFilterRemoved();


        /*! Raises the in event 'portaFilterInserted' that is defined in the interface scope 'GpioDrv'. */
        void raisePortaFilterInserted();


        /*! Raises the in event 'powerAvailable' that is defined in the interface scope 'GpioDrv'. */
        void raisePowerAvailable();


        /*! Raises the in event 'powerNotAvailable' that is defined in the interface scope 'GpioDrv'. */
        void raisePowerNotAvailable();


        /*! Raises the in event 'terminateStandbyAction' that is defined in the interface scope 'GpioDrv'. */
        void raiseTerminateStandbyAction();


        //! Inner class for GpioDrv interface scope operation callbacks.
        class OperationCallback
        {
public:

            virtual ~OperationCallback() = 0;

            virtual void sendMotorOn() = 0;

            virtual void sendMotorOff() = 0;


        };

        /*! Set the working instance of the operation callback interface 'OperationCallback'. */
        void setOperationCallback( OperationCallback * operationCallback );

private:

        friend class SystemStateMachine;

        sc_boolean motorOn;
        /*! Raises the in event 'anyUserAction' that is defined in the interface scope 'GpioDrv'. */
        void internal_raiseAnyUserAction();

        sc_boolean anyUserAction_raised;
        /*! Raises the in event 'startButtonPressed' that is defined in the interface scope 'GpioDrv'. */
        void internal_raiseStartButtonPressed();

        sc_boolean startButtonPressed_raised;
        /*! Raises the in event 'startButtonReleased' that is defined in the interface scope 'GpioDrv'. */
        void internal_raiseStartButtonReleased();

        sc_boolean startButtonReleased_raised;
        /*! Raises the in event 'jogDialLeft' that is defined in the interface scope 'GpioDrv'. */
        void internal_raiseJogDialLeft();

        sc_boolean jogDialLeft_raised;
        /*! Raises the in event 'jogDialRight' that is defined in the interface scope 'GpioDrv'. */
        void internal_raiseJogDialRight();

        sc_boolean jogDialRight_raised;
        /*! Raises the in event 'jogDialPressed' that is defined in the interface scope 'GpioDrv'. */
        void internal_raiseJogDialPressed();

        sc_boolean jogDialPressed_raised;
        /*! Raises the in event 'jogDialReleased' that is defined in the interface scope 'GpioDrv'. */
        void internal_raiseJogDialReleased();

        sc_boolean jogDialReleased_raised;
        /*! Raises the in event 'portaFilterRemoved' that is defined in the interface scope 'GpioDrv'. */
        void internal_raisePortaFilterRemoved();

        sc_boolean portaFilterRemoved_raised;
        /*! Raises the in event 'portaFilterInserted' that is defined in the interface scope 'GpioDrv'. */
        void internal_raisePortaFilterInserted();

        sc_boolean portaFilterInserted_raised;
        /*! Raises the in event 'powerAvailable' that is defined in the interface scope 'GpioDrv'. */
        void internal_raisePowerAvailable();

        sc_boolean powerAvailable_raised;
        /*! Raises the in event 'powerNotAvailable' that is defined in the interface scope 'GpioDrv'. */
        void internal_raisePowerNotAvailable();

        sc_boolean powerNotAvailable_raised;
        /*! Raises the in event 'terminateStandbyAction' that is defined in the interface scope 'GpioDrv'. */
        void internal_raiseTerminateStandbyAction();

        sc_boolean terminateStandbyAction_raised;
        void dispatch_event( systemstatemachine_events::SctEvent * event );

        SystemStateMachine * parent;


        OperationCallback * ifaceGpioDrvOperationCallback;


    };

    /*! Returns an instance of the interface class 'GpioDrv'. */
    GpioDrv * gpioDrv();

    //! Inner class for Wifi interface scope.
    class Wifi
    {
public:

        Wifi( SystemStateMachine * parent );


        //! Inner class for Wifi interface scope operation callbacks.
        class OperationCallback
        {
public:

            virtual ~OperationCallback() = 0;

            virtual void setWifiOn() = 0;

            virtual void setWifiOff() = 0;

            virtual void sendSleepOn() = 0;

            virtual void sendSleepOff() = 0;

            virtual void resetConfig() = 0;


        };

        /*! Set the working instance of the operation callback interface 'OperationCallback'. */
        void setOperationCallback( OperationCallback * operationCallback );

private:

        friend class SystemStateMachine;

        void dispatch_event( systemstatemachine_events::SctEvent * event );

        SystemStateMachine * parent;


        OperationCallback * ifaceWifiOperationCallback;


    };

    /*! Returns an instance of the interface class 'Wifi'. */
    Wifi * wifi();

    //! Inner class for ErrorCtrl interface scope.
    class ErrorCtrl
    {
public:

        ErrorCtrl( SystemStateMachine * parent );

        /*! Raises the in event 'anyErrorChange' that is defined in the interface scope 'ErrorCtrl'. */
        void raiseAnyErrorChange();


        /*! Raises the in event 'fatalErrorChange' that is defined in the interface scope 'ErrorCtrl'. */
        void raiseFatalErrorChange();


        /*! Raises the in event 'significantErrorChange' that is defined in the interface scope 'ErrorCtrl'. */
        void raiseSignificantErrorChange();


        //! Inner class for ErrorCtrl interface scope operation callbacks.
        class OperationCallback
        {
public:

            virtual ~OperationCallback() = 0;

            virtual void toggleErrorDisplay() = 0;

            virtual sc_boolean errorsPresent() = 0;

            virtual sc_boolean isHopperDismounted() = 0;

            virtual sc_boolean isFatalErrorActive() = 0;

            virtual sc_boolean isDegradedModeActive() = 0;

            virtual sc_boolean isSignificantErrorActive() = 0;


        };

        /*! Set the working instance of the operation callback interface 'OperationCallback'. */
        void setOperationCallback( OperationCallback * operationCallback );

private:

        friend class SystemStateMachine;

        /*! Raises the in event 'anyErrorChange' that is defined in the interface scope 'ErrorCtrl'. */
        void internal_raiseAnyErrorChange();

        sc_boolean anyErrorChange_raised;
        /*! Raises the in event 'fatalErrorChange' that is defined in the interface scope 'ErrorCtrl'. */
        void internal_raiseFatalErrorChange();

        sc_boolean fatalErrorChange_raised;
        /*! Raises the in event 'significantErrorChange' that is defined in the interface scope 'ErrorCtrl'. */
        void internal_raiseSignificantErrorChange();

        sc_boolean significantErrorChange_raised;
        void dispatch_event( systemstatemachine_events::SctEvent * event );

        SystemStateMachine * parent;


        OperationCallback * ifaceErrorCtrlOperationCallback;


    };

    /*! Returns an instance of the interface class 'ErrorCtrl'. */
    ErrorCtrl * errorCtrl();

    //! Inner class for Config interface scope.
    class Config
    {
public:

        Config( SystemStateMachine * parent );


        //! Inner class for Config interface scope operation callbacks.
        class OperationCallback
        {
public:

            virtual ~OperationCallback() = 0;

            virtual sc_integer confirmedMainState() = 0;

            virtual sc_integer sleepTimeS() = 0;

            virtual void setSleepTimeS( sc_integer nSleepTimeS ) = 0;

            virtual sc_boolean isWifiOn() = 0;

            virtual void setWifiOn( sc_boolean wifiOn ) = 0;

            virtual void resetWifiConfig() = 0;


        };

        /*! Set the working instance of the operation callback interface 'OperationCallback'. */
        void setOperationCallback( OperationCallback * operationCallback );

private:

        friend class SystemStateMachine;

        void dispatch_event( systemstatemachine_events::SctEvent * event );

        SystemStateMachine * parent;


        OperationCallback * ifaceConfigOperationCallback;


    };

    /*! Returns an instance of the interface class 'Config'. */
    Config * config();

    //! Inner class for Statistic interface scope.
    class Statistic
    {
public:

        Statistic( SystemStateMachine * parent );


        //! Inner class for Statistic interface scope operation callbacks.
        class OperationCallback
        {
public:

            virtual ~OperationCallback() = 0;

            virtual sc_string discLifeStr() = 0;

            virtual void resetDiscLifeTime() = 0;


        };

        /*! Set the working instance of the operation callback interface 'OperationCallback'. */
        void setOperationCallback( OperationCallback * operationCallback );

private:

        friend class SystemStateMachine;

        void dispatch_event( systemstatemachine_events::SctEvent * event );

        SystemStateMachine * parent;


        OperationCallback * ifaceStatisticOperationCallback;


    };

    /*! Returns an instance of the interface class 'Statistic'. */
    Statistic * statistic();

    //! Inner class for Grinder interface scope.
    class Grinder
    {
public:

        Grinder( SystemStateMachine * parent );

        /*! Raises the in event 'evtStopGrind' that is defined in the interface scope 'Grinder'. */
        void raiseEvtStopGrind();


        /*! Raises the in event 'evtStartGrind' that is defined in the interface scope 'Grinder'. */
        void raiseEvtStartGrind();


        /*! Raises the in event 'startRecipeEdit' that is defined in the interface scope 'Grinder'. */
        void raiseStartRecipeEdit();


        /*! Raises the in event 'recipeEditAborted' that is defined in the interface scope 'Grinder'. */
        void raiseRecipeEditAborted();


        /*! Raises the in event 'recipeEditFinished' that is defined in the interface scope 'Grinder'. */
        void raiseRecipeEditFinished();


        //! Inner class for Grinder interface scope operation callbacks.
        class OperationCallback
        {
public:

            virtual ~OperationCallback() = 0;

            virtual void updateDisplay() = 0;

            virtual void startGrind() = 0;

            virtual void stopGrind() = 0;

            virtual sc_boolean isGrindStartable() = 0;

            virtual void continueGrind() = 0;

            virtual void grindingFinished() = 0;

            virtual void inc100MsCounter() = 0;

            virtual sc_boolean isGrindingTimeElapsed() = 0;

            virtual sc_boolean isNotInGrindMode() = 0;

            virtual void tryStartGrinding() = 0;

            virtual sc_boolean isGrindByTime() = 0;

            virtual void editDigit( sc_integer nDigitPos ) = 0;

            virtual void editDecDigit() = 0;

            virtual void editIncDigit() = 0;

            virtual void editRecipe() = 0;

            virtual void editIncRecipe() = 0;

            virtual void editDecRecipe() = 0;

            virtual void storeRecipe() = 0;

            virtual void abortRecipeEdit() = 0;

            virtual void tryStartRecipeEdit( sc_integer nRecipeNo ) = 0;


        };

        /*! Set the working instance of the operation callback interface 'OperationCallback'. */
        void setOperationCallback( OperationCallback * operationCallback );

private:

        friend class SystemStateMachine;

        /*! Raises the in event 'evtStopGrind' that is defined in the interface scope 'Grinder'. */
        void internal_raiseEvtStopGrind();

        sc_boolean evtStopGrind_raised;
        /*! Raises the in event 'evtStartGrind' that is defined in the interface scope 'Grinder'. */
        void internal_raiseEvtStartGrind();

        sc_boolean evtStartGrind_raised;
        /*! Raises the in event 'startRecipeEdit' that is defined in the interface scope 'Grinder'. */
        void internal_raiseStartRecipeEdit();

        sc_boolean startRecipeEdit_raised;
        /*! Raises the in event 'recipeEditAborted' that is defined in the interface scope 'Grinder'. */
        void internal_raiseRecipeEditAborted();

        sc_boolean recipeEditAborted_raised;
        /*! Raises the in event 'recipeEditFinished' that is defined in the interface scope 'Grinder'. */
        void internal_raiseRecipeEditFinished();

        sc_boolean recipeEditFinished_raised;
        void dispatch_event( systemstatemachine_events::SctEvent * event );

        SystemStateMachine * parent;


        OperationCallback * ifaceGrinderOperationCallback;


    };

    /*! Returns an instance of the interface class 'Grinder'. */
    Grinder * grinder();


    /*
     * Functions inherited from StatemachineInterface
     */
    virtual void enter();

    virtual void exit();

    /*!
     * Checks if the state machine is active (until 2.4.1 this method was used for states).
     * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
     */
    virtual sc_boolean isActive() const;


    /*!
     * Checks if all active states are final.
     * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
     */
    virtual sc_boolean isFinal() const;

    /*!
     * Checks if member of the state machine must be set. For example an operation callback.
     */
    sc_boolean check();

    /*
     * Functions inherited from TimedStatemachineInterface
     */
    virtual void setTimerService( sc::timer::TimerServiceInterface * timerService );

    virtual sc::timer::TimerServiceInterface * getTimerService();

    virtual void raiseTimeEvent( sc_eventid event );

    virtual sc_integer getNumberOfParallelTimeEvents();


    void setTraceObserver( sc::trace::TraceObserver<SystemStateMachineStates> * tracingcallback );

    sc::trace::TraceObserver<SystemStateMachineStates> * getTraceObserver();


    /*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
    sc_boolean isStateActive( SystemStateMachineStates state ) const;

    //! number of time events used by the state machine.
    static const sc_integer timeEventsCount = 33;

    //! number of time events that can be active at once.
    static const sc_integer parallelTimeEventsCount = 6;

protected:

private:

    SystemStateMachine( const SystemStateMachine & rhs );
    SystemStateMachine & operator=( const SystemStateMachine & );

    sc_integer tempDurationCounter;
    /*! Raises the in event 'startButtonShortPress' that is defined in the internal scope. */
    void internal_raiseStartButtonShortPress();

    sc_boolean startButtonShortPress_raised;
    /*! Raises the in event 'startButtonLongPress' that is defined in the internal scope. */
    void internal_raiseStartButtonLongPress();

    sc_boolean startButtonLongPress_raised;
    /*! Raises the in event 'portaFilterSaveInserted' that is defined in the internal scope. */
    void internal_raisePortaFilterSaveInserted();

    sc_boolean portaFilterSaveInserted_raised;
    /*! Raises the in event 'jogDialVeryLongPress' that is defined in the internal scope. */
    void internal_raiseJogDialVeryLongPress();

    sc_boolean jogDialVeryLongPress_raised;
    /*! Raises the in event 'jogDialLongPress' that is defined in the internal scope. */
    void internal_raiseJogDialLongPress();

    sc_boolean jogDialLongPress_raised;
    /*! Raises the in event 'jogDialShortPress' that is defined in the internal scope. */
    void internal_raiseJogDialShortPress();

    sc_boolean jogDialShortPress_raised;
    /*! Raises the in event 'bothButtonsPressed' that is defined in the internal scope. */
    void internal_raiseBothButtonsPressed();

    sc_boolean bothButtonsPressed_raised;
    /*! Raises the in event 'bothButtonsReleased' that is defined in the internal scope. */
    void internal_raiseBothButtonsReleased();

    sc_boolean bothButtonsReleased_raised;
    /*! Raises the in event 'bothButtonsLongPress' that is defined in the internal scope. */
    void internal_raiseBothButtonsLongPress();

    sc_boolean bothButtonsLongPress_raised;
    /*! Raises the in event 'bothButtonsLongReleased' that is defined in the internal scope. */
    void internal_raiseBothButtonsLongReleased();

    sc_boolean bothButtonsLongReleased_raised;
    /*! Raises the in event 'manualForceStandby' that is defined in the internal scope. */
    void internal_raiseManualForceStandby();

    sc_boolean manualForceStandby_raised;
    /*! Raises the in event 'finishGrinding' that is defined in the internal scope. */
    void internal_raiseFinishGrinding();

    sc_boolean finishGrinding_raised;
    /*! Raises the in event 'standbyStarted' that is defined in the internal scope. */
    void internal_raiseStandbyStarted();

    sc_boolean standbyStarted_raised;
    /*! Raises the in event 'standbyTerminated' that is defined in the internal scope. */
    void internal_raiseStandbyTerminated();

    sc_boolean standbyTerminated_raised;
    /*! Raises the in event 'timeoutEditMode' that is defined in the internal scope. */
    void internal_raiseTimeoutEditMode();

    sc_boolean timeoutEditMode_raised;
    void internal_dispatch_event( systemstatemachine_events::SctEvent * event );


    //! the maximum number of orthogonal states defines the dimension of the state configuration vector.
    static const sc_ushort                               maxOrthogonalStates = 8;

    sc::timer::TimerServiceInterface *                   timerService;
    sc_boolean                                           timeEvents[timeEventsCount];

    sc::trace::TraceObserver<SystemStateMachineStates> * ifaceTraceObserver;

    SystemStateMachineStates                             stateConfVector[maxOrthogonalStates];


    Display     ifaceDisplay;
    Application ifaceApplication;
    GpioDrv     ifaceGpioDrv;
    Wifi        ifaceWifi;
    ErrorCtrl   ifaceErrorCtrl;
    Config      ifaceConfig;
    Statistic   ifaceStatistic;
    Grinder     ifaceGrinder;


    sc_boolean isExecuting;
    sc_integer stateConfVectorPosition;

    /*! Gets the value of the variable 'tempDurationCounter' that is defined in the internal scope. */
    sc_integer getTempDurationCounter() const;

    /*! Sets the value of the variable 'tempDurationCounter' that is defined in the internal scope. */
    void setTempDurationCounter( sc_integer value );

    /*! Raises the in event 'startButtonShortPress' that is defined in the internal scope. */
    void raiseStartButtonShortPress();

    /*! Checks if the out event 'startButtonShortPress' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedStartButtonShortPress() const;

    /*! Raises the in event 'startButtonLongPress' that is defined in the internal scope. */
    void raiseStartButtonLongPress();

    /*! Checks if the out event 'startButtonLongPress' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedStartButtonLongPress() const;

    /*! Raises the in event 'portaFilterSaveInserted' that is defined in the internal scope. */
    void raisePortaFilterSaveInserted();

    /*! Checks if the out event 'portaFilterSaveInserted' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedPortaFilterSaveInserted() const;

    /*! Raises the in event 'jogDialVeryLongPress' that is defined in the internal scope. */
    void raiseJogDialVeryLongPress();

    /*! Checks if the out event 'jogDialVeryLongPress' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedJogDialVeryLongPress() const;

    /*! Raises the in event 'jogDialLongPress' that is defined in the internal scope. */
    void raiseJogDialLongPress();

    /*! Checks if the out event 'jogDialLongPress' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedJogDialLongPress() const;

    /*! Raises the in event 'jogDialShortPress' that is defined in the internal scope. */
    void raiseJogDialShortPress();

    /*! Checks if the out event 'jogDialShortPress' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedJogDialShortPress() const;

    /*! Raises the in event 'bothButtonsPressed' that is defined in the internal scope. */
    void raiseBothButtonsPressed();

    /*! Checks if the out event 'bothButtonsPressed' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedBothButtonsPressed() const;

    /*! Raises the in event 'bothButtonsReleased' that is defined in the internal scope. */
    void raiseBothButtonsReleased();

    /*! Checks if the out event 'bothButtonsReleased' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedBothButtonsReleased() const;

    /*! Raises the in event 'bothButtonsLongPress' that is defined in the internal scope. */
    void raiseBothButtonsLongPress();

    /*! Checks if the out event 'bothButtonsLongPress' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedBothButtonsLongPress() const;

    /*! Raises the in event 'bothButtonsLongReleased' that is defined in the internal scope. */
    void raiseBothButtonsLongReleased();

    /*! Checks if the out event 'bothButtonsLongReleased' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedBothButtonsLongReleased() const;

    /*! Raises the in event 'manualForceStandby' that is defined in the internal scope. */
    void raiseManualForceStandby();

    /*! Checks if the out event 'manualForceStandby' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedManualForceStandby() const;

    /*! Raises the in event 'finishGrinding' that is defined in the internal scope. */
    void raiseFinishGrinding();

    /*! Checks if the out event 'finishGrinding' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedFinishGrinding() const;

    /*! Raises the in event 'standbyStarted' that is defined in the internal scope. */
    void raiseStandbyStarted();

    /*! Checks if the out event 'standbyStarted' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedStandbyStarted() const;

    /*! Raises the in event 'standbyTerminated' that is defined in the internal scope. */
    void raiseStandbyTerminated();

    /*! Checks if the out event 'standbyTerminated' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedStandbyTerminated() const;

    /*! Raises the in event 'timeoutEditMode' that is defined in the internal scope. */
    void raiseTimeoutEditMode();

    /*! Checks if the out event 'timeoutEditMode' that is defined in the internal scope has been raised. */
    sc_boolean isRaisedTimeoutEditMode() const;


    // prototypes of all internal functions

    sc_boolean check_HemroE54SystemStateMachine__choice_0_tr1_tr1();

    sc_boolean check_HemroE54SystemStateMachine__choice_1_tr0_tr0();

    sc_boolean check_HemroE54SystemStateMachine__choice_2_tr0_tr0();

    sc_boolean check_HemroE54SystemStateMachine_AutoSleepEdit_r1__choice_0_tr1_tr1();

    sc_boolean check_HemroE54SystemStateMachine_AutoSleepEdit_r1__choice_0_tr2_tr2();

    sc_boolean check_HemroE54SystemStateMachine_AutoSleepEdit_r1__choice_0_tr3_tr3();

    sc_boolean check_HemroE54SystemStateMachine_AutoSleepEdit_r1__choice_0_tr4_tr4();

    sc_boolean check_HemroE54SystemStateMachine_WlanSettings_r1__choice_0_tr1_tr1();

    sc_boolean check_HemroE54SystemStateMachine__choice_3_tr0_tr0();

    sc_boolean check_HemroE54SystemStateMachine__choice_4_tr1_tr1();

    sc_boolean check_HemroE54SystemStateMachine__choice_5_tr0_tr0();

    sc_boolean check_HemroE54SystemStateMachine__choice_5_tr2_tr2();

    sc_boolean check_HemroE54SystemStateMachine__choice_5_tr3_tr3();

    sc_boolean check_HemroE54SystemStateMachine__choice_5_tr4_tr4();

    sc_boolean check_HemroE54SystemStateMachine__choice_6_tr1_tr1();

    sc_boolean check_HemroE54SystemStateMachine__choice_7_tr1_tr1();

    sc_boolean check_HemroE54SystemStateMachine__choice_8_tr1_tr1();

    sc_boolean check_Grinding__choice_0_tr0_tr0();

    sc_boolean check_Grinding__choice_0_tr2_tr2();

    void effect_HemroE54SystemStateMachine_AutoSleepEdit_tr0();

    void effect_HemroE54SystemStateMachine_WlanSettings_tr0();

    void effect_HemroE54SystemStateMachine_DiscLifeTime_tr0();

    void effect_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_tr0();

    void effect_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_tr1();

    void effect_RecipeEdit_OrthogonalRecipeEdit_tr0();

    void effect_HemroE54SystemStateMachine__choice_0_tr1();

    void effect_HemroE54SystemStateMachine__choice_0_tr0();

    void effect_HemroE54SystemStateMachine__choice_1_tr0();

    void effect_HemroE54SystemStateMachine__choice_1_tr1();

    void effect_HemroE54SystemStateMachine__choice_2_tr0();

    void effect_HemroE54SystemStateMachine__choice_2_tr1();

    void effect_HemroE54SystemStateMachine_AutoSleepEdit_r1__choice_0_tr1();

    void effect_HemroE54SystemStateMachine_AutoSleepEdit_r1__choice_0_tr2();

    void effect_HemroE54SystemStateMachine_AutoSleepEdit_r1__choice_0_tr3();

    void effect_HemroE54SystemStateMachine_AutoSleepEdit_r1__choice_0_tr4();

    void effect_HemroE54SystemStateMachine_AutoSleepEdit_r1__choice_0_tr0();

    void effect_HemroE54SystemStateMachine_WlanSettings_r1__choice_0_tr1();

    void effect_HemroE54SystemStateMachine_WlanSettings_r1__choice_0_tr0();

    void effect_HemroE54SystemStateMachine__choice_3_tr0();

    void effect_HemroE54SystemStateMachine__choice_3_tr1();

    void effect_HemroE54SystemStateMachine__choice_4_tr1();

    void effect_HemroE54SystemStateMachine__choice_4_tr0();

    void effect_HemroE54SystemStateMachine__choice_5_tr0();

    void effect_HemroE54SystemStateMachine__choice_5_tr2();

    void effect_HemroE54SystemStateMachine__choice_5_tr3();

    void effect_HemroE54SystemStateMachine__choice_5_tr4();

    void effect_HemroE54SystemStateMachine__choice_5_tr1();

    void effect_HemroE54SystemStateMachine__choice_6_tr1();

    void effect_HemroE54SystemStateMachine__choice_6_tr0();

    void effect_HemroE54SystemStateMachine__choice_7_tr1();

    void effect_HemroE54SystemStateMachine__choice_7_tr0();

    void effect_HemroE54SystemStateMachine__choice_8_tr1();

    void effect_HemroE54SystemStateMachine__choice_8_tr0();

    void effect_Grinding__choice_0_tr0();

    void effect_Grinding__choice_0_tr2();

    void effect_Grinding__choice_0_tr1();

    void enact_HemroE54SystemStateMachine_Init();

    void enact_HemroE54SystemStateMachine_ManualMode();

    void enact_HemroE54SystemStateMachine_Recipe4();

    void enact_HemroE54SystemStateMachine_Recipe3();

    void enact_HemroE54SystemStateMachine_Recipe2();

    void enact_HemroE54SystemStateMachine_Recipe1();

    void enact_HemroE54SystemStateMachine_DisplayTest();

    void enact_HemroE54SystemStateMachine_WiFi();

    void enact_HemroE54SystemStateMachine_Errors();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner1();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner2();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner3();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show5Min();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show3Min();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro1();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro2();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro3();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro4();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show10Min();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show20Min();

    void enact_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show30Min();

    void enact_HemroE54SystemStateMachine_WlanSettings_r1_WlanOn();

    void enact_HemroE54SystemStateMachine_WlanSettings_r1_WlanOff();

    void enact_HemroE54SystemStateMachine_WlanSettings_r1_WlanReset();

    void enact_HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLabel();

    void enact_HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLifeTime();

    void enact_HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOn();

    void enact_HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOff();

    void enact_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash1();

    void enact_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash2();

    void enact_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash3();

    void enact_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash4();

    void enact_SleepMode_NormalOperation();

    void enact_SleepMode_Standby();

    void enact_KeyPressEvaluation_BothButtonsPressed();

    void enact_KeyPressEvaluation_LongPressBothButtons();

    void enact_KeyPressEvaluation_LongPress_r2_LongPressStartButton();

    void enact_KeyPressEvaluation_LongPress_r2_StartButtonPressed();

    void enact_KeyPressEvaluation_LongPress_r2_StartButtonPressedFromBoth();

    void enact_KeyPressEvaluation_LongPress_r2_StartButtonLongPressedFromBoth();

    void enact_KeyPressEvaluation_LongPress_r1_LongPressJogDial();

    void enact_KeyPressEvaluation_LongPress_r1_JogDialPressed();

    void enact_KeyPressEvaluation_LongPress_r1_JogDialPressedFromBoth();

    void enact_KeyPressEvaluation_LongPress_r1_JogDialLongPressedFromBoth();

    void enact_KeyPressEvaluation_LongPress_r1_VeryLongPressJogDial();

    void enact_Grinding_Grinding();

    void enact_Grinding_GrindingError();

    void enact_Grinding_Idle();

    void enact_Grinding_SaveGrindingResults();

    void enact_RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit1();

    void enact_RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit2();

    void enact_RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit3();

    void enact_RecipeEdit_OrthogonalRecipeEdit_r1_EditRecipe();

    void exact_HemroE54SystemStateMachine_DisplayTest();

    void exact_HemroE54SystemStateMachine_WiFi();

    void exact_HemroE54SystemStateMachine_Errors();

    void exact_HemroE54SystemStateMachine_AutoSleepEdit();

    void exact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner1();

    void exact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner2();

    void exact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner3();

    void exact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro1();

    void exact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro2();

    void exact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro3();

    void exact_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro4();

    void exact_HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLabel();

    void exact_HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLifeTime();

    void exact_HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOn();

    void exact_HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOff();

    void exact_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash1();

    void exact_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash2();

    void exact_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash3();

    void exact_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash4();

    void exact_SleepMode_NormalOperation();

    void exact_SleepMode_Standby();

    void exact_KeyPressEvaluation_BothButtonsPressed();

    void exact_KeyPressEvaluation_LongPress_r2_LongPressStartButton();

    void exact_KeyPressEvaluation_LongPress_r2_StartButtonPressed();

    void exact_KeyPressEvaluation_LongPress_r2_StartButtonPressedFromBoth();

    void exact_KeyPressEvaluation_LongPress_r2_StartButtonLongPressedFromBoth();

    void exact_KeyPressEvaluation_LongPress_r1_LongPressJogDial();

    void exact_KeyPressEvaluation_LongPress_r1_JogDialPressed();

    void exact_KeyPressEvaluation_LongPress_r1_JogDialPressedFromBoth();

    void exact_KeyPressEvaluation_LongPress_r1_JogDialLongPressedFromBoth();

    void exact_KeyPressEvaluation_LongPress_r1_VeryLongPressJogDial();

    void exact_Grinding_Grinding();

    void exact_Grinding_GrindingError();

    void exact_Grinding_SaveGrindingResults();

    void enseq_HemroE54SystemStateMachine_Init_default();

    void enseq_HemroE54SystemStateMachine_ManualMode_default();

    void enseq_HemroE54SystemStateMachine_Recipe4_default();

    void enseq_HemroE54SystemStateMachine_Recipe3_default();

    void enseq_HemroE54SystemStateMachine_Recipe2_default();

    void enseq_HemroE54SystemStateMachine_Recipe1_default();

    void enseq_HemroE54SystemStateMachine_DisplayTest_default();

    void enseq_HemroE54SystemStateMachine_WiFi_default();

    void enseq_HemroE54SystemStateMachine_Errors_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner1_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner2_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner3_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show5Min_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show3Min_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro1_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro2_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro3_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro4_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show10Min_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show20Min_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show30Min_default();

    void enseq_HemroE54SystemStateMachine_WlanSettings_default();

    void enseq_HemroE54SystemStateMachine_WlanSettings_r1_WlanOn_default();

    void enseq_HemroE54SystemStateMachine_WlanSettings_r1_WlanOff_default();

    void enseq_HemroE54SystemStateMachine_WlanSettings_r1_WlanReset_default();

    void enseq_HemroE54SystemStateMachine_WlanSettings_r1_AnnounceEdit_default();

    void enseq_HemroE54SystemStateMachine_EditRecipe1_default();

    void enseq_HemroE54SystemStateMachine_EditRecipe2_default();

    void enseq_HemroE54SystemStateMachine_EditRecipe3_default();

    void enseq_HemroE54SystemStateMachine_EditRecipe4_default();

    void enseq_HemroE54SystemStateMachine_GrindManual_default();

    void enseq_HemroE54SystemStateMachine_GrindRecipe4_default();

    void enseq_HemroE54SystemStateMachine_GrindRecipe3_default();

    void enseq_HemroE54SystemStateMachine_GrindRecipe2_default();

    void enseq_HemroE54SystemStateMachine_GrindRecipe1_default();

    void enseq_HemroE54SystemStateMachine_Standby_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLabel_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLifeTime_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOn_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOff_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash1_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash2_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash3_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash4_default();

    void enseq_SleepMode_NormalOperation_default();

    void enseq_SleepMode_Standby_default();

    void enseq_KeyPressEvaluation_BothButtonsPressed_default();

    void enseq_KeyPressEvaluation_LongPressBothButtons_default();

    void enseq_KeyPressEvaluation_LongPress_default();

    void enseq_KeyPressEvaluation_LongPress_r2_StartButtonError_default();

    void enseq_KeyPressEvaluation_LongPress_r2_LongPressStartButton_default();

    void enseq_KeyPressEvaluation_LongPress_r2_StartButtonPressed_default();

    void enseq_KeyPressEvaluation_LongPress_r2_StartButtonReleased_default();

    void enseq_KeyPressEvaluation_LongPress_r2_StartButtonPressedFromBoth_default();

    void enseq_KeyPressEvaluation_LongPress_r2_StartButtonLongPressedFromBoth_default();

    void enseq_KeyPressEvaluation_LongPress_r1_JogDialError_default();

    void enseq_KeyPressEvaluation_LongPress_r1_LongPressJogDial_default();

    void enseq_KeyPressEvaluation_LongPress_r1_JogDialPressed_default();

    void enseq_KeyPressEvaluation_LongPress_r1_JogDialReleased_default();

    void enseq_KeyPressEvaluation_LongPress_r1_JogDialPressedFromBoth_default();

    void enseq_KeyPressEvaluation_LongPress_r1_JogDialLongPressedFromBoth_default();

    void enseq_KeyPressEvaluation_LongPress_r1_VeryLongPressJogDial_default();

    void enseq_Grinding_Grinding_default();

    void enseq_Grinding_GrindingError_default();

    void enseq_Grinding_Idle_default();

    void enseq_Grinding_SaveGrindingResults_default();

    void enseq_PortaFilterInsertion_Idle_default();

    void enseq_RecipeEdit_OrthogonalRecipeEdit_default();

    void enseq_RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit1_default();

    void enseq_RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit2_default();

    void enseq_RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit3_default();

    void enseq_RecipeEdit_OrthogonalRecipeEdit_r1_EditRecipe_default();

    void enseq_RecipeEdit_OrthogonalRecipeEdit_r2_EditRecipe_default();

    void enseq_RecipeEdit_Idle_default();

    void enseq_HemroE54SystemStateMachine_default();

    void enseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_default();

    void enseq_HemroE54SystemStateMachine_WlanSettings_r1_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_default();

    void enseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_default();

    void enseq_SleepMode_default();

    void enseq_KeyPressEvaluation_default();

    void enseq_KeyPressEvaluation_LongPress_r2_default();

    void enseq_KeyPressEvaluation_LongPress_r1_default();

    void enseq_Grinding_default();

    void enseq_PortaFilterInsertion_default();

    void enseq_RecipeEdit_default();

    void enseq_RecipeEdit_OrthogonalRecipeEdit_r1_default();

    void enseq_RecipeEdit_OrthogonalRecipeEdit_r2_default();

    void exseq_HemroE54SystemStateMachine_Init();

    void exseq_HemroE54SystemStateMachine_ManualMode();

    void exseq_HemroE54SystemStateMachine_Recipe4();

    void exseq_HemroE54SystemStateMachine_Recipe3();

    void exseq_HemroE54SystemStateMachine_Recipe2();

    void exseq_HemroE54SystemStateMachine_Recipe1();

    void exseq_HemroE54SystemStateMachine_DisplayTest();

    void exseq_HemroE54SystemStateMachine_WiFi();

    void exseq_HemroE54SystemStateMachine_Errors();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner1();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner2();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner3();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show5Min();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show3Min();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro1();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro2();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro3();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro4();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show10Min();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show20Min();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1_Show30Min();

    void exseq_HemroE54SystemStateMachine_WlanSettings();

    void exseq_HemroE54SystemStateMachine_WlanSettings_r1_WlanOn();

    void exseq_HemroE54SystemStateMachine_WlanSettings_r1_WlanOff();

    void exseq_HemroE54SystemStateMachine_WlanSettings_r1_WlanReset();

    void exseq_HemroE54SystemStateMachine_WlanSettings_r1_AnnounceEdit();

    void exseq_HemroE54SystemStateMachine_EditRecipe1();

    void exseq_HemroE54SystemStateMachine_EditRecipe2();

    void exseq_HemroE54SystemStateMachine_EditRecipe3();

    void exseq_HemroE54SystemStateMachine_EditRecipe4();

    void exseq_HemroE54SystemStateMachine_GrindManual();

    void exseq_HemroE54SystemStateMachine_GrindRecipe4();

    void exseq_HemroE54SystemStateMachine_GrindRecipe3();

    void exseq_HemroE54SystemStateMachine_GrindRecipe2();

    void exseq_HemroE54SystemStateMachine_GrindRecipe1();

    void exseq_HemroE54SystemStateMachine_Standby();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLabel();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLifeTime();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOn();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOff();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash1();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash2();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash3();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash4();

    void exseq_SleepMode_NormalOperation();

    void exseq_SleepMode_Standby();

    void exseq_KeyPressEvaluation_BothButtonsPressed();

    void exseq_KeyPressEvaluation_LongPressBothButtons();

    void exseq_KeyPressEvaluation_LongPress();

    void exseq_KeyPressEvaluation_LongPress_r2_StartButtonError();

    void exseq_KeyPressEvaluation_LongPress_r2_LongPressStartButton();

    void exseq_KeyPressEvaluation_LongPress_r2_StartButtonPressed();

    void exseq_KeyPressEvaluation_LongPress_r2_StartButtonReleased();

    void exseq_KeyPressEvaluation_LongPress_r2_StartButtonPressedFromBoth();

    void exseq_KeyPressEvaluation_LongPress_r2_StartButtonLongPressedFromBoth();

    void exseq_KeyPressEvaluation_LongPress_r1_JogDialError();

    void exseq_KeyPressEvaluation_LongPress_r1_LongPressJogDial();

    void exseq_KeyPressEvaluation_LongPress_r1_JogDialPressed();

    void exseq_KeyPressEvaluation_LongPress_r1_JogDialReleased();

    void exseq_KeyPressEvaluation_LongPress_r1_JogDialPressedFromBoth();

    void exseq_KeyPressEvaluation_LongPress_r1_JogDialLongPressedFromBoth();

    void exseq_KeyPressEvaluation_LongPress_r1_VeryLongPressJogDial();

    void exseq_Grinding_Grinding();

    void exseq_Grinding_GrindingError();

    void exseq_Grinding_Idle();

    void exseq_Grinding_SaveGrindingResults();

    void exseq_PortaFilterInsertion_Idle();

    void exseq_RecipeEdit_OrthogonalRecipeEdit();

    void exseq_RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit1();

    void exseq_RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit2();

    void exseq_RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit3();

    void exseq_RecipeEdit_OrthogonalRecipeEdit_r1_EditRecipe();

    void exseq_RecipeEdit_OrthogonalRecipeEdit_r2_EditRecipe();

    void exseq_RecipeEdit_Idle();

    void exseq_HemroE54SystemStateMachine();

    void exseq_HemroE54SystemStateMachine_AutoSleepEdit_r1();

    void exseq_HemroE54SystemStateMachine_WlanSettings_r1();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1();

    void exseq_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1();

    void exseq_SleepMode();

    void exseq_KeyPressEvaluation();

    void exseq_KeyPressEvaluation_LongPress_r2();

    void exseq_KeyPressEvaluation_LongPress_r1();

    void exseq_Grinding();

    void exseq_PortaFilterInsertion();

    void exseq_RecipeEdit();

    void exseq_RecipeEdit_OrthogonalRecipeEdit_r1();

    void exseq_RecipeEdit_OrthogonalRecipeEdit_r2();

    void react_HemroE54SystemStateMachine__choice_0();

    void react_HemroE54SystemStateMachine__choice_1();

    void react_HemroE54SystemStateMachine__choice_2();

    void react_HemroE54SystemStateMachine_AutoSleepEdit_r1__choice_0();

    void react_HemroE54SystemStateMachine_WlanSettings_r1__choice_0();

    void react_HemroE54SystemStateMachine__choice_3();

    void react_HemroE54SystemStateMachine__choice_4();

    void react_HemroE54SystemStateMachine__choice_5();

    void react_HemroE54SystemStateMachine__choice_6();

    void react_HemroE54SystemStateMachine__choice_7();

    void react_HemroE54SystemStateMachine__choice_8();

    void react_Grinding__choice_0();

    void react_HemroE54SystemStateMachine__entry_Default();

    void react_HemroE54SystemStateMachine_AutoSleepEdit_r1__entry_Default();

    void react_HemroE54SystemStateMachine_WlanSettings_r1__entry_Default();

    void react_HemroE54SystemStateMachine_DiscLifeTime_r1__entry_Default();

    void react_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1__entry_Default();

    void react_SleepMode__entry_Default();

    void react_KeyPressEvaluation_LongPress_r2__entry_Default();

    void react_KeyPressEvaluation_LongPress_r1__entry_Default();

    void react_KeyPressEvaluation__entry_Default();

    void react_Grinding__entry_Default();

    void react_PortaFilterInsertion__entry_Default();

    void react_RecipeEdit_OrthogonalRecipeEdit_r1__entry_Default();

    void react_RecipeEdit_OrthogonalRecipeEdit_r2__entry_Default();

    void react_RecipeEdit__entry_Default();

    void react_HemroE54SystemStateMachine_AutoSleepEdit_r1__exit_Default();

    void react_HemroE54SystemStateMachine_WlanSettings_r1__exit_Default();

    void react_HemroE54SystemStateMachine_DiscLifeTime_r1__exit_Default();

    void react_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_completed();

    void react_HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_aborted();

    void react_RecipeEdit_OrthogonalRecipeEdit_r2__exit_Default();

    sc_integer react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_Init_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_ManualMode_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_Recipe4_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_Recipe3_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_Recipe2_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_Recipe1_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DisplayTest_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_WiFi_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_Errors_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner1_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner2_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowBanner3_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_Show5Min_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_Show3Min_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro1_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro2_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro3_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_ShowIntro4_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_Show10Min_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_Show20Min_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_AutoSleepEdit_r1_Show30Min_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_WlanSettings_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_WlanSettings_r1_WlanOn_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_WlanSettings_r1_WlanOff_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_WlanSettings_r1_WlanReset_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_WlanSettings_r1_AnnounceEdit_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_EditRecipe1_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_EditRecipe2_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_EditRecipe3_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_EditRecipe4_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_GrindManual_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_GrindRecipe4_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_GrindRecipe3_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_GrindRecipe2_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_GrindRecipe1_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_Standby_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DiscLifeTime_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLabel_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DiscLifeTime_r1_showDiscLifeTime_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOn_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DiscLifeTime_r1_showResetOff_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash1_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash2_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash3_react( const sc_integer transitioned_before );

    sc_integer HemroE54SystemStateMachine_DiscLifeTime_r1_showIntro_r1_showDash4_react( const sc_integer transitioned_before );

    sc_integer SleepMode_NormalOperation_react( const sc_integer transitioned_before );

    sc_integer SleepMode_Standby_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_BothButtonsPressed_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPressBothButtons_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r2_StartButtonError_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r2_LongPressStartButton_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r2_StartButtonPressed_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r2_StartButtonReleased_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r2_StartButtonPressedFromBoth_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r2_StartButtonLongPressedFromBoth_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r1_JogDialError_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r1_LongPressJogDial_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r1_JogDialPressed_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r1_JogDialReleased_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r1_JogDialPressedFromBoth_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r1_JogDialLongPressedFromBoth_react( const sc_integer transitioned_before );

    sc_integer KeyPressEvaluation_LongPress_r1_VeryLongPressJogDial_react( const sc_integer transitioned_before );

    sc_integer Grinding_Grinding_react( const sc_integer transitioned_before );

    sc_integer Grinding_GrindingError_react( const sc_integer transitioned_before );

    sc_integer Grinding_Idle_react( const sc_integer transitioned_before );

    sc_integer Grinding_SaveGrindingResults_react( const sc_integer transitioned_before );

    sc_integer PortaFilterInsertion_Idle_react( const sc_integer transitioned_before );

    sc_integer RecipeEdit_OrthogonalRecipeEdit_react( const sc_integer transitioned_before );

    sc_integer RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit1_react( const sc_integer transitioned_before );

    sc_integer RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit2_react( const sc_integer transitioned_before );

    sc_integer RecipeEdit_OrthogonalRecipeEdit_r1_EditDigit3_react( const sc_integer transitioned_before );

    sc_integer RecipeEdit_OrthogonalRecipeEdit_r1_EditRecipe_react( const sc_integer transitioned_before );

    sc_integer RecipeEdit_OrthogonalRecipeEdit_r2_EditRecipe_react( const sc_integer transitioned_before );

    sc_integer RecipeEdit_Idle_react( const sc_integer transitioned_before );

    void clearInEvents();

    void clearInternalEvents();

    void microStep();

    void runCycle();


    std::deque<systemstatemachine_events::SctEvent *> internalEventQueue;
    systemstatemachine_events::SctEvent * getNextEvent();

    void dispatch_event( systemstatemachine_events::SctEvent * event );

    systemstatemachine_events::SystemStateMachineEventName getTimedEventName( sc_eventid evid );

    std::deque<systemstatemachine_events::SctEvent *> inEventQueue;


};


inline SystemStateMachine::Display::OperationCallback::~OperationCallback()
{
}

inline SystemStateMachine::Application::OperationCallback::~OperationCallback()
{
}

inline SystemStateMachine::GpioDrv::OperationCallback::~OperationCallback()
{
}

inline SystemStateMachine::Wifi::OperationCallback::~OperationCallback()
{
}

inline SystemStateMachine::ErrorCtrl::OperationCallback::~OperationCallback()
{
}

inline SystemStateMachine::Config::OperationCallback::~OperationCallback()
{
}

inline SystemStateMachine::Statistic::OperationCallback::~OperationCallback()
{
}

inline SystemStateMachine::Grinder::OperationCallback::~OperationCallback()
{
}

#endif /* SYSTEMSTATEMACHINE_H_ */
