/*
 * Tlc5955Letter.cpp
 *
 *  Created on: 30.10.2019
 *      Author: gesser
 */

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

#include "Tlc5955Letter.h"

#include <esp_err.h>

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

#define INVALID_LETTER  0b01001001

uint8_t Tlc5955Letter::m_u8LetterSegments[255];

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

Tlc5955Letter::Tlc5955Letter()
    : UxEspCppLibrary::EspLog( "" )
    , m_nLetter( 0 )
{
    // first instance will init the letter table
    if ( m_u8LetterSegments[0] != INVALID_LETTER )
    {
        initLetterTable();
    }

    setLetter( 0 );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

Tlc5955Letter::Tlc5955Letter( const std::string & strName )
    : EspLog( strName )
    , m_nLetter( 0 )
{
    // first instance will init the letter table
    if ( m_u8LetterSegments[0] != INVALID_LETTER )
    {
        initLetterTable();
    }

    setLetter( 0 );
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

Tlc5955Letter::~Tlc5955Letter()
{
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

// static
void Tlc5955Letter::initLetterTable( void )
{
    // init all letters with 'invalid' indication
    for ( int i = 0; i < sizeof( m_u8LetterSegments ); i++ )
    {
        m_u8LetterSegments[i] = INVALID_LETTER;
    }

    m_u8LetterSegments[' '] = 0b00000000;
    m_u8LetterSegments['A'] = 0b01110111;
    m_u8LetterSegments['b'] = 0b01111100;
    m_u8LetterSegments['C'] = 0b00111001;
    m_u8LetterSegments['c'] = 0b01011000;
    m_u8LetterSegments['d'] = 0b01011110;
    m_u8LetterSegments['E'] = 0b01111001;
    m_u8LetterSegments['F'] = 0b01110001;
    m_u8LetterSegments['G'] = 0b00111101;
    m_u8LetterSegments['H'] = 0b01110110;
    m_u8LetterSegments['h'] = 0b01110100;
    m_u8LetterSegments['I'] = 0b00000110;
    m_u8LetterSegments['i'] = 0b00000100;
    m_u8LetterSegments['L'] = 0b00111000;
    m_u8LetterSegments['M'] = 0b00110111;
    m_u8LetterSegments['m'] = 0b01010100;
    m_u8LetterSegments['N'] = 0b00110111;
    m_u8LetterSegments['n'] = 0b01010100;
    m_u8LetterSegments['O'] = 0b00111111;
    m_u8LetterSegments['o'] = 0b01011100;
    m_u8LetterSegments['P'] = 0b01110011;
    m_u8LetterSegments['r'] = 0b01010000;
    m_u8LetterSegments['S'] = 0b01101101;
    m_u8LetterSegments['t'] = 0b01111000;
    m_u8LetterSegments['U'] = 0b00111110;
    m_u8LetterSegments['u'] = 0b00011100;
    m_u8LetterSegments['Y'] = 0b01110010;
    m_u8LetterSegments['0'] = 0b00111111;
    m_u8LetterSegments['1'] = 0b00000110;
    m_u8LetterSegments['2'] = 0b01011011;
    m_u8LetterSegments['3'] = 0b01001111;
    m_u8LetterSegments['4'] = 0b01100110;
    m_u8LetterSegments['5'] = 0b01101101;
    m_u8LetterSegments['6'] = 0b01111101;
    m_u8LetterSegments['7'] = 0b00000111;
    m_u8LetterSegments['8'] = 0b01111111;
    m_u8LetterSegments['9'] = 0b01101111;
    m_u8LetterSegments['-'] = 0b01000000;
    m_u8LetterSegments['_'] = 0b00001000;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void Tlc5955Letter::setLetter( const int nLetter )
{
    m_nLetter = nLetter;

    if ( m_nLetter >= 0
         && m_nLetter < 255 )
    {
        uint8_t u8Segments = m_u8LetterSegments[m_nLetter];

        for ( int i = 0; i < segment_Num; i++ )
        {
            if ( ( u8Segments & 0x1 ) > 0 )
            {
                m_segments[i].setUsed( true );
            }
            else
            {
                m_segments[i].setUsed( false );
            }

            u8Segments >>= 1;
        }
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void Tlc5955Letter::setValue( const int nValue )
{
    for ( int i = 0; i < segment_Num; i++ )
    {
        m_segments[i].setValue( nValue );
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void Tlc5955Letter::setStatus( const X54::ledStatus nLedStatus )
{
    for ( int i = 0; i < segment_Num; i++ )
    {
        m_segments[i].setStatus( nLedStatus );
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void Tlc5955Letter::toggleBlink( const bool bBlinkToggle )
{
    for ( int i = 0; i < segment_Num; i++ )
    {
        m_segments[i].toggleBlink( bBlinkToggle );
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

bool Tlc5955Letter::hasError( void ) const
{
    bool bError = false;

    for ( int i = 0; i < segment_Num
          && !bError; i++ )
    {
        bError = m_segments[i].hasError();
    }

    return bError;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

Tlc5955Led & Tlc5955Letter::segment( const int nSegmentType )
{
    if ( nSegmentType < 0
         || nSegmentType >= segment_Num )
    {
        ESP_ERROR_CHECK( ESP_FAIL );
    }

    return m_segments[nSegmentType];
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

const Tlc5955Led & Tlc5955Letter::segment( const int nSegmentType ) const
{
    if ( nSegmentType < 0
         || nSegmentType >= segment_Num )
    {
        ESP_ERROR_CHECK( ESP_FAIL );
    }

    return m_segments[nSegmentType];
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void Tlc5955Letter::fillDataShiftStreamTx( uint8_t * pu8DataShiftStreamTx ) const
{
    for ( int i = 0; i < segment_Num; i++ )
    {
        m_segments[i].fillDataShiftStreamTx( pu8DataShiftStreamTx );
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void Tlc5955Letter::processDataShiftStreamRx( const uint8_t * pu8DataShiftStreamRx )
{
    for ( int i = 0; i < segment_Num; i++ )
    {
        m_segments[i].processDataShiftStreamRx( pu8DataShiftStreamRx );
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

std::string Tlc5955Letter::errorInfo( void ) const
{
    std::string strErrorInfo;

    for ( int i = 0; i < segment_Num; i++ )
    {
        if ( m_segments[i].hasError() )
        {
            if ( !strErrorInfo.empty() )
            {
                strErrorInfo += ";";
            }

            strErrorInfo += m_segments[i].errorInfo();
        }
    }

    return strErrorInfo;
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void Tlc5955Letter::setOnValue( const int nValue )
{
    for ( int i = 0; i < segment_Num; i++ )
    {
        m_segments[i].setOnValue( nValue );
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void Tlc5955Letter::setDimmedLightValue( const int nValue )
{
    for ( int i = 0; i < segment_Num; i++ )
    {
        m_segments[i].setDimmedLightValue( nValue );
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

void Tlc5955Letter::setDimmedStrongValue( const int nValue )
{
    for ( int i = 0; i < segment_Num; i++ )
    {
        m_segments[i].setDimmedStrongValue( nValue );
    }
}

/*!************************************************************************************************************************************************************
 *
 *************************************************************************************************************************************************************/

